import telebot as tb
from telebot import types
import parser
import sql
from memory_profiler import memory_usage


class WeatherBot(tb.TeleBot):
    # creating virtual keyboards for bot's users
    start_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")
    start_markup.add(start_button)

    forecasts_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    remember_city_button = types.KeyboardButton("–ó–∞–ø–æ–º–Ω–∏—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç")
    today = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    fc_for_5days = types.KeyboardButton('–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π')
    fc_for_10days = types.KeyboardButton('–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 10 –¥–Ω–µ–π')
    forecasts_markup.add(remember_city_button, today, fc_for_5days, fc_for_10days)

    def start(self, message):
        remembered_cities = sql.select_user_cities(message.from_user.id)
        sql.update_user_current_markup(message.from_user.id, 'cities_markup')
        if remembered_cities:
            user_city_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            city_buttons = [types.KeyboardButton(name) for name in remembered_cities]
            user_city_markup.add(*city_buttons)
            self.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞', reply_markup=user_city_markup)
        else:
            self.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞', reply_markup=types.ReplyKeyboardRemove())

    # this func takes the name of the city and calls two times
    def check_city(self, message):
        text = message.text[0].upper() + message.text[1:]
        cities_result = sql.select_city_name(text)
        # the first call, when forms reply keyboard markup. it works like browser searcher in the dict of cities
        if len(cities_result) > 1 or (len(cities_result) == 1 and text != cities_result[0][0]):
            cities_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            cities_markup.add(*[types.KeyboardButton(name[0]) for name in cities_result][:11])
            self.send_message(message.chat.id,
                              '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω(—ã) –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π(–µ) –ø—É–Ω–∫—Ç(—ã)üòá\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω '
                              '–∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–Ω–∏–∑—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.', reply_markup=cities_markup)
        elif len(cities_result) == 0:
            self.send_message(message.chat.id, '–û—à–∏–±–∫–∞ü§î –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ '
                                               '–±–∞–∑–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.')
        # the second call, when user chose required city
        else:
            sql.update_user_current_markup(message.from_user.id, 'forecasts_markup')
            sql.update_user_last_city(message.from_user.id, message.text)
            self.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –õ–∏–±–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–º–Ω–∏—Ç—å '
                                               '—ç—Ç–æ—Ç –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç (–º–∞–∫—Å.: 3) –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.üòè',
                              reply_markup=self.forecasts_markup)

    def check_count_of_user_cities(self, message, user_last_city):
        user_cities = sql.select_user_cities(message.from_user.id)
        if user_last_city in user_cities:
            self.send_message(message.chat.id, '–£–ø—Å...üò¨ –≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')
        elif len(user_cities) == 3:
            sql.update_user_current_markup(message.from_user.id, 'removing_markup')
            removing_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            cancel_button = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
            removing_markup.add(*[types.KeyboardButton(f'[‚ùå] {name}') for name in user_cities])
            removing_markup.add(cancel_button)
            self.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–æ –º–∞–∫—Å–∏–º—É–º–∞!üò≥ '
                                               f'–í—ã–±–µ—Ä–∏—Ç–µ, –≤–º–µ—Å—Ç–æ –∫–∞–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:'
                                               f' <b>{user_last_city}</b>',
                              reply_markup=removing_markup, parse_mode='html')
        else:
            self.remember_city(user_last_city, message, user_cities)

    def delete_city(self, message, user_last_city):
        city = message.text[4:]
        user_cities = sql.select_user_cities(message.from_user.id)
        try:
            user_cities.remove(city)
            updated_user_cities = '; '.join(user_cities)
            sql.update_user_cities(message.from_user.id, updated_user_cities)
            sql.update_user_current_markup(message.from_user.id, 'forecasts_markup')
            self.remember_city(user_last_city, message, user_cities)
        except Exception:
            self.send_message(message.chat.id, '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏!üò°')

    def remember_city(self, user_last_city, message, user_cities):
        user_cities.append(user_last_city)
        updated_user_cities = '; '.join(user_cities)
        sql.update_user_cities(message.from_user.id, updated_user_cities)
        forecasts_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        today = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        fc_for_5days = types.KeyboardButton('–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π')
        fc_for_10days = types.KeyboardButton('–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 10 –¥–Ω–µ–π')
        forecasts_markup.add(today, fc_for_5days, fc_for_10days)
        self.send_message(message.chat.id, '‚úè–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!) –í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑:',
                          reply_markup=forecasts_markup)

    # this function shows weather today and weather now
    def check_weather(self, message, user_last_city):
        url = sql.select_city_url(user_last_city)
        weather_now, time, temp_now, wind_day, wind_night, wind_dir_day, wind_dir_night, date, weather, night_temp, \
        day_temp, wind_now, wind_dir_now = parser.parse_weather(url)
        sql.update_user_current_markup(message.from_user.id, 'start_markup')
        # output
        self.send_message(message.chat.id,
                          f'üå§<b>–ì–æ—Ä–æ–¥ –æ–ø–æ–∑–Ω–∞–Ω. –ü–æ–≥–æ–¥–∞ –≤ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ {user_last_city.split(", ")[0]}:</b>\n'
                          f'\n–°–µ–≥–æ–¥–Ω—è: {date};\n'
                          f'\n{weather};\n'
                          f'\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–æ—á—å—é: {night_temp}¬∞–°'
                          f'\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–Ω—ë–º: {day_temp}¬∞–°'
                          f'\n–í–µ—Ç–µ—Ä –Ω–æ—á—å—é: {wind_night} –º/—Å, <b>{wind_dir_night}</b>'
                          f'\n–í–µ—Ç–µ—Ä –¥–Ω–µ–º: {wind_day} –º/—Å, <b>{wind_dir_day}</b>\n'
                          f'\n‚õà<b>–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å ({time}):</b>\n'
                          f'\n{weather_now};'
                          f'\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_now}¬∞–°'
                          f'\n–í–µ—Ç–µ—Ä: {wind_now} –º/—Å, <b>{wind_dir_now}</b>',
                          reply_markup=self.start_markup, parse_mode='html')

    # this function shows weather for 5 or for 10 days
    def check_weather_for_couple_days(self, user_last_city, message, num_of_days):
        url = sql.select_city_url(user_last_city)
        date, weather, day_temp, night_temp, wind, directions = parser.parse_weather_for_couple_days(url)

        output = f'<b>–ü–æ–≥–æ–¥–∞ –≤ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ {user_last_city.split(", ")[0]} –Ω–∞ {num_of_days} –¥–Ω–µ–π:</b>\n\n'
        for i in range(num_of_days):
            output += f'üî¥<b>{date[i]}:</b> {weather[i]};\n' \
                      f'–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day_temp[i]};\n' \
                      f'–ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {night_temp[i]};\n' \
                      f'–ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind[i]}, <b>{directions[i]}</b>.\n\n'

        sql.update_user_current_markup(message.from_user.id, 'start_markup')
        self.send_message(message.chat.id, output, reply_markup=self.start_markup, parse_mode='html')


# creating telegram bot
bot = WeatherBot('YOUR_TELEGRAM_BOT_TOKEN')


@bot.message_handler(content_types='text')
def message_reply(message):
    user_id, user_name, user_nickname = message.from_user.id, message.from_user.first_name, message.from_user.username
    user_current_markup, user_last_city, user_city = sql.persoanalize_user(user_id, user_name, user_nickname)
    print(memory_usage())

    # this if-else operator processing user's requests and calls appropriate functions in WeatherBot class
    if message.text.lower() == '—É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É' and user_current_markup == 'start_markup' or message.text == '/start':
        bot.start(message)

    elif message.text.lower() == '–æ—Ç–º–µ–Ω–∞' and user_current_markup == 'removing_markup':
        sql.update_user_current_markup(message.from_user.id, 'forecasts_markup')
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑:', reply_markup=bot.forecasts_markup)

    elif message.text.startswith('[‚ùå] ') and user_current_markup == 'removing_markup':
        bot.delete_city(message, user_last_city)

    elif message.text.lower() == '–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è' and user_current_markup == 'forecasts_markup':
        bot.check_weather(message, user_last_city)

    elif message.text.lower() == '–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π' and user_current_markup == 'forecasts_markup':
        bot.check_weather_for_couple_days(user_last_city, message, 5)

    elif message.text.lower() == '–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 10 –¥–Ω–µ–π' and user_current_markup == 'forecasts_markup':
        bot.check_weather_for_couple_days(user_last_city, message, 10)

    elif message.text.lower() == '–∑–∞–ø–æ–º–Ω–∏—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç' and user_current_markup == 'forecasts_markup':
        bot.check_count_of_user_cities(message, user_last_city)

    elif user_current_markup == 'cities_markup':
        bot.check_city(message)

    else:
        bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æü§® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é —Å–Ω–∏–∑—É, '
                                          '–ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ.')


bot.infinity_polling(timeout=10, long_polling_timeout=5)
